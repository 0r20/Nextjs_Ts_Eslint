{"version":3,"file":"static/webpack/static/development/pages/index.js.7f1ccffe1a22fb8d2cdd.hot-update.js","sources":["webpack:///./src/utils/redux/dynamicReducerWrap.tsx"],"sourcesContent":["// @ts-nocheck\nimport React, { FC, useEffect, ComponentType } from 'react';\nimport { ReducersMapObject } from 'redux';\nimport { ReactReduxContext } from 'react-redux';\nimport { StoreProps } from './withRedux';\nimport { ReducerEnhancedStore } from './configureStore';\n\ninterface ReducerProps {\n  reducers: ReducersMapObject;\n}\n\n(function() {\n  // @ts-ignore\n  if ( typeof Object.id == \"undefined\" ) {\n      var id = 0;\n      // @ts-ignore\n      Object.id = function(o) {\n          if ( typeof o.__uniqueid == \"undefined\" ) {\n              Object.defineProperty(o, \"__uniqueid\", {\n                  value: ++id,\n                  enumerable: false,\n                  // This could go either way, depending on your \n                  // interpretation of what an \"id\" is\n                  writable: false\n              });\n          }\n\n          return o.__uniqueid;\n      };\n  }\n})();\n\n// interface DynamicReducerWrapProps extends ReducerProps {\n//   Child: ComponentType<any>;\n// }\n\ninterface DynamicReducerWrapProps extends ReducerProps {\n  type?: 'replace' | 'inject';\n  Child?: ComponentType<any>;\n  position?: number;\n}\n\nconst DynamicReducer: FC<DynamicReducerWrapProps & StoreProps<ReducerEnhancedStore>> = ({\n  store,\n  type = 'replace',\n  reducers,\n  Child,\n}) => {\n  useEffect(() => {\n    if ('count' in reducers) {\n      (window as any).testReducers = reducers;\n    }\n    console.log('reducers.id: ', Object.id(reducers));\n    console.log('start: ', reducers);\n    if (type === 'replace') {\n      store.substitueReducers(reducers);\n    } else if (type === 'inject') {\n      store.injectReducers(reducers);\n    }\n  }, []);\n\n  return Child ? <Child /> : null;\n};\n\nfunction dynamicReducerWrap<S extends ReducerEnhancedStore = ReducerEnhancedStore>({\n  position,\n  type = 'replace',\n  reducers,\n  Child,\n}: DynamicReducerWrapProps): FC {\n  console.log(reducers);\n  return () => {\n    debugger;\n    console.log('init: ', reducers, type);\n    console.log(position);\n    return (\n      <ReactReduxContext.Consumer>\n        {({ store }) => {\n          console.log(reducers);\n          console.log(position);\n          return (\n          <DynamicReducer type={type} reducers={reducers} store={store as S} Child={Child} />\n        );}}\n      </ReactReduxContext.Consumer>\n    );\n  };\n}\n\nexport default dynamicReducerWrap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;;A","sourceRoot":""}