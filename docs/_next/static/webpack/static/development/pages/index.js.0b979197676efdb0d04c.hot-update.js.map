{"version":3,"file":"static/webpack/static/development/pages/index.js.0b979197676efdb0d04c.hot-update.js","sources":["webpack:///./src/utils/redux/dynamicReducerWrap.tsx"],"sourcesContent":["import React, { ComponentType, Component } from 'react';\nimport { ReducersMapObject } from 'redux';\nimport { ReactReduxContext } from 'react-redux';\nimport { StoreProps } from './withRedux';\nimport { ReducerEnhancedStore } from './configureStore';\n\ninterface ReducerProps {\n  reducers: ReducersMapObject;\n}\n\ninterface DynamicReducerWrapProps extends ReducerProps {\n  Child: ComponentType<any>;\n}\n\nclass SubstitueReducers extends Component<\n  DynamicReducerWrapProps & StoreProps<ReducerEnhancedStore>\n> {\n  public constructor(props: DynamicReducerWrapProps & StoreProps<ReducerEnhancedStore>) {\n    super(props);\n    const { store, reducers } = props;\n    store.substitueReducers(reducers);\n    console.log('injecting reducer: ', reducers);\n  }\n\n  public componentWillUnmount() {\n    const { store, reducers } = this.props;\n    console.log('remove reducers: ', reducers);\n    store.removeUnusedReducers();\n  }\n\n  public render() {\n    const { Child } = this.props;\n    // const { showChild } = this.state;\n    return <Child />;\n  }\n}\n\nfunction dynamicReducerWrap<S extends ReducerEnhancedStore = ReducerEnhancedStore>({\n  reducers,\n  Child,\n}: DynamicReducerWrapProps) {\n  return () => {\n    return (\n      <ReactReduxContext.Consumer>\n        {({ store }) => (\n          <>\n            <SubstitueReducers store={store as S} reducers={reducers} Child={Child} />\n          </>\n        )}\n      </ReactReduxContext.Consumer>\n    );\n  };\n}\n\nexport default dynamicReducerWrap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAWA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAGA;AACA;AAJA;AAKA;AACA;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AApBA;AACA;AAsBA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AACA;;;;A","sourceRoot":""}