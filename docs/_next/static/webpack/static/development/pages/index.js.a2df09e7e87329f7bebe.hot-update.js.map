{"version":3,"file":"static/webpack/static/development/pages/index.js.a2df09e7e87329f7bebe.hot-update.js","sources":["webpack:///./src/utils/redux/dynamicReducerWrap.tsx"],"sourcesContent":["import React, { FC, useEffect, ComponentType } from 'react';\nimport { ReducersMapObject } from 'redux';\nimport { ReactReduxContext } from 'react-redux';\nimport { StoreProps } from './withRedux';\nimport { ReducerEnhancedStore } from './configureStore';\n\ninterface ReducerProps {\n  reducers: ReducersMapObject;\n}\n\n// interface DynamicReducerWrapProps extends ReducerProps {\n//   Child: ComponentType<any>;\n// }\n\ninterface DynamicReducerWrapProps extends ReducerProps {\n  type?: 'replace' | 'inject';\n  Child?: ComponentType<any>;\n}\n\nconst DynamicReducer: FC<DynamicReducerWrapProps & StoreProps<ReducerEnhancedStore>> = ({\n  store,\n  type = 'replace',\n  reducers,\n  Child,\n}) => {\n  useEffect(() => {\n    console.log('start: ', reducers);\n    if (type === 'replace') {\n      store.substitueReducers(reducers);\n    } else if (type === 'inject') {\n      store.injectReducers(reducers);\n    }\n  }, []);\n\n  return Child ? <Child /> : null;\n};\n\nfunction dynamicReducerWrap<S extends ReducerEnhancedStore = ReducerEnhancedStore>({\n  type = 'replace',\n  reducers,\n  Child,\n}: DynamicReducerWrapProps) {\n  console.log(reducers);\n  return () => {\n    console.log('init: ', reducers, type);\n    return (\n      <ReactReduxContext.Consumer>\n        {({ store }) => {\n          console.log(reducers);\n          return (\n          <DynamicReducer type={type} reducers={reducers} store={store as S} Child={Child} />\n        );}}\n      </ReactReduxContext.Consumer>\n    );\n  };\n}\n\nexport default dynamicReducerWrap;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAgBA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;;A","sourceRoot":""}