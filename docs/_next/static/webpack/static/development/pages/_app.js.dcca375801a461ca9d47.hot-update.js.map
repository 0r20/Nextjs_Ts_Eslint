{"version":3,"file":"static/webpack/static/development/pages/_app.js.dcca375801a461ca9d47.hot-update.js","sources":["webpack:///./src/utils/redux/withRedux.tsx"],"sourcesContent":["import React from 'react';\nimport { Store } from 'redux';\nimport { NextPageContext, NextComponentType } from 'next';\nimport { AppContext, AppProps, AppInitialProps } from 'next/app';\nimport defaultConfig, { Config } from './defaultConfig';\nimport objectAssign from '../common/objectAssign';\n\nexport interface StoreProps<S = Store> {\n  store: S;\n}\n\nexport interface WithStorePageContext<S = Store> extends NextPageContext, StoreProps<S> {\n  isServer: boolean;\n}\n\nexport interface WithStoreAppContext<S = Store> extends AppContext {\n  ctx: WithStorePageContext<S>;\n}\n\nexport interface MakeStoreOptions<S = Store> extends Config, WithStorePageContext<S> {}\n\nexport interface MakeStore<S = Store> {\n  (initialState: any, options?: Partial<MakeStoreOptions<S>>): S;\n}\n\nexport interface InitStoreOptions<S = Store> {\n  initialState?: any;\n  ctx?: WithStorePageContext<S>;\n}\n\nexport interface WrappedAppProps {\n  initialProps: any; // stuff returned from getInitialProps\n  initialState: any; // stuff in the Store state after getInitialProps\n  isServer: boolean;\n}\n\nexport interface TransformedAppProps<S = Store> extends StoreProps<S>, AppProps {}\n\nexport type TransformedApp<S = Store> = NextComponentType<\n  AppContext,\n  AppInitialProps,\n  TransformedAppProps<S>\n>;\n\nfunction withRedux<S extends Store = Store>(\n  makeStore: MakeStore<S>,\n  optionalConfig: Partial<Config> = {}\n) {\n  const config: Config = objectAssign()(\n    defaultConfig,\n    { isServer: typeof window === 'undefined' },\n    optionalConfig\n  );\n  const { storeKey, isServer, deserializeState, serializeState } = config;\n\n  const serveStore = ({ initialState, ctx }: InitStoreOptions<S>): S => {\n    const createStore = () =>\n      makeStore(deserializeState(initialState), {\n        ...ctx,\n        ...config,\n      });\n\n    // always create store if server\n    if (isServer) return createStore();\n\n    // reuse store if client\n    (window as any)[storeKey] = (window as any)[storeKey] || createStore();\n\n    return (window as any)[storeKey];\n  };\n\n  return (App: TransformedApp<S>) => {\n    const WrappedApp: NextComponentType<\n      WithStoreAppContext<S>,\n      WrappedAppProps,\n      WrappedAppProps\n    > = ({ initialProps, initialState, ...props }) => {\n      const store = serveStore({ initialState });\n\n      return <App {...props} {...initialProps} store={store} />;\n    };\n\n    WrappedApp.getInitialProps = async appCtx => {\n      const store = serveStore({ ctx: appCtx.ctx });\n\n      // eslint-disable-next-line no-param-reassign\n      appCtx.ctx.store = store;\n      // eslint-disable-next-line no-param-reassign\n      appCtx.ctx.isServer = isServer;\n\n      let initialProps = {};\n      if (App.getInitialProps) {\n        initialProps = await App.getInitialProps.call(App, appCtx);\n      }\n\n      return {\n        isServer,\n        initialState: serializeState(store.getState()),\n        initialProps,\n      };\n    };\n\n    return WrappedApp;\n  };\n}\n\nexport default withRedux;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AAsCA;AAGA;AACA;AAEA;AAAA;AAHA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAAA;AAcA;AACA;AACA;AAHA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}