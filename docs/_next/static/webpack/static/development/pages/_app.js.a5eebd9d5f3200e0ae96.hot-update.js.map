{"version":3,"file":"static/webpack/static/development/pages/_app.js.a5eebd9d5f3200e0ae96.hot-update.js","sources":["webpack:///./src/utils/redux/configureStore.ts"],"sourcesContent":["import {\n  createStore,\n  ReducersMapObject,\n  combineReducers,\n  Reducer,\n  StoreEnhancer,\n  Store,\n  Action,\n} from 'redux';\nimport objectAssign from '../common/objectAssign';\nimport { MakeStore } from './withRedux';\n\ninterface StoreReducerEnhanced {\n  commonReducers: ReducersMapObject;\n  asyncReducers: ReducersMapObject;\n  addReducer(key: string, asyncReducer: Reducer): void;\n  removeReducer(key: string): void;\n  injectReducers(reducers: ReducersMapObject): void;\n  substitueReducers(reducers: ReducersMapObject): void;\n  removeUnusedReducers(): void;\n}\n\nexport interface ReducerEnhancedStore extends Store, StoreReducerEnhanced {}\n\nconst configureStore = (\n  commonReducers: ReducersMapObject,\n  enhancer: StoreEnhancer\n): MakeStore<ReducerEnhancedStore> => (initialState: any = {}) => {\n  let keysToRemove: string[] = [];\n  let keysToRemoveReducers: string[] = [];\n\n  const createReducer = (asyncReducers?: ReducersMapObject) => (state: any, action: Action) => {\n    let updatedState = state;\n    if (keysToRemove.length > 0) {\n      updatedState = objectAssign(([k]) => !(k in keysToRemove))({}, state);\n      keysToRemove = [];\n    }\n    return combineReducers({\n      ...commonReducers,\n      ...asyncReducers,\n    })(updatedState, action);\n  };\n\n  const store: ReducerEnhancedStore = Object.assign(\n    createStore(createReducer(), initialState, enhancer),\n    {\n      commonReducers,\n      asyncReducers: {},\n\n      addReducer: (key, asyncReducer) => {\n        if (!key || store.asyncReducers[key]) {\n          return;\n        }\n        store.asyncReducers[key] = asyncReducer;\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      removeReducer: key => {\n        if (!key || !store.asyncReducers[key]) {\n          return;\n        }\n        delete store.asyncReducers[key];\n        keysToRemove.push(key);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      injectReducers: reducers => {\n        objectAssign()(store.asyncReducers, reducers);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      substitueReducers: reducers => {\n        console.log('substitute reducers: ', reducers);\n        keysToRemove.push(\n          ...Object.keys(store.asyncReducers).filter(k => !(k in reducers))\n        );\n        // store.asyncReducers = reducers;\n        objectAssign()(store.asyncReducers, reducers);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      removeUnusedReducers: () => {\n        console.log('removeUnusedReducers: ', keysToRemove, keysToRemoveReducers);\n        store.asyncReducers = objectAssign(([k]) => {\n          return !keysToRemoveReducers.includes(k);\n        })({}, store.asyncReducers);\n        keysToRemove = keysToRemoveReducers;\n        keysToRemoveReducers = [];\n        store.replaceReducer(createReducer(store.asyncReducers));\n        console.log('used reducers removed: ', store.asyncReducers);\n      },\n    } as StoreReducerEnhanced\n  );\n\n  return store;\n};\n\nexport default configureStore;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AAVA;AACA;AAWA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AACA;AAgDA;AACA;AAvEA;AACA;AAwEA;;;;A","sourceRoot":""}