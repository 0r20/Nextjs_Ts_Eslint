{"version":3,"file":"static/webpack/static/development/pages/_app.js.e91e8a83eade1918afa6.hot-update.js","sources":["webpack:///./src/utils/redux/configureStore.ts"],"sourcesContent":["import {\n  createStore,\n  combineReducers,\n  ReducersMapObject,\n  Reducer,\n  StoreEnhancer,\n  Store,\n  Action,\n  Middleware,\n} from 'redux';\nimport createSagaMiddleware, { Saga } from 'redux-saga';\nimport objectAssign from '../common/objectAssign';\nimport { MakeStore } from './withRedux';\nimport { SagaTasksProp } from './withReduxSaga';\n\nexport interface SagaMapObject {\n  [key: string]: Saga;\n}\n\ninterface StoreReducerEnhanced extends SagaTasksProp {\n  commonReducers: ReducersMapObject;\n  asyncReducers: ReducersMapObject;\n  addReducer(key: string, asyncReducer: Reducer): void;\n  removeReducer(key: string): void;\n  injectReducers(reducers: ReducersMapObject): void;\n  substitueReducers(reducers: ReducersMapObject): void;\n  addSaga(key: string, saga: Saga): void;\n  removeSaga(key: string): Promise<void>;\n  injectSagas(sagas: SagaMapObject): void;\n  substitueSagas(sagas: SagaMapObject): Promise<void>;\n}\n\nexport interface ReducerEnhancedStore extends Store, StoreReducerEnhanced {}\n\nconst configureStore = ({\n  commonReducers,\n  enhancer,\n  middlewareArray = [],\n  rootSaga,\n}: {\n  commonReducers: ReducersMapObject;\n  enhancer(...args: Middleware[]): StoreEnhancer;\n  middlewareArray?: Middleware[];\n  rootSaga?: Saga;\n}): MakeStore<ReducerEnhancedStore> => (initialState: any = {}) => {\n  let keysToRemove: string[] = [];\n\n  const createReducer = (asyncReducers?: ReducersMapObject) => (state: any, action: Action) => {\n    let updatedState = state;\n    if (keysToRemove.length > 0) {\n      updatedState = objectAssign(([k]) => !(k in keysToRemove))({}, state);\n      keysToRemove = [];\n    }\n    return combineReducers({\n      ...commonReducers,\n      ...asyncReducers,\n    })(updatedState, action);\n  };\n\n  const sagaMiddleware = createSagaMiddleware();\n\n  middlewareArray.unshift(sagaMiddleware);\n  const store: ReducerEnhancedStore = Object.assign(\n    createStore(createReducer(), initialState, enhancer(...middlewareArray)),\n    {\n      commonReducers,\n      asyncReducers: {},\n\n      addReducer: (key, asyncReducer) => {\n        if (!key || store.asyncReducers[key]) {\n          return;\n        }\n        store.asyncReducers[key] = asyncReducer;\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      removeReducer: key => {\n        if (!key || !store.asyncReducers[key]) {\n          return;\n        }\n        store.asyncReducers = objectAssign(([k]) => k !== key)({}, store.asyncReducers);\n        keysToRemove.push(key);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      injectReducers: reducers => {\n        objectAssign()(store.asyncReducers, reducers);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      substitueReducers: reducers => {\n        keysToRemove.push(...Object.keys(store.asyncReducers).filter(k => !(k in reducers)));\n        store.asyncReducers = objectAssign()({}, reducers);\n        store.replaceReducer(createReducer(store.asyncReducers));\n      },\n\n      sagaTasks: rootSaga ? { root: sagaMiddleware.run(rootSaga) } : {},\n\n      addSaga: (key, saga) => {\n        if (!key || store.sagaTasks[key]) {\n          return;\n        }\n        store.sagaTasks[key] = sagaMiddleware.run(saga);\n      },\n\n      removeSaga: async key => {\n        if (!key || !store.sagaTasks[key]) {\n          return;\n        }\n        await store.sagaTasks[key].cancel();\n        store.sagaTasks = objectAssign(([k]) => k !== key)({}, store.sagaTasks);\n      },\n\n      injectSagas: sagas => {\n        Object.entries(sagas).forEach(([key, saga]) => {\n          if (!(key in store.sagaTasks) && saga) {\n            store.sagaTasks[key] = sagaMiddleware.run(saga);\n          }\n        });\n      },\n\n      substitueSagas: async sagas => {\n        const sagaKeysToRemove: string[] = [];\n        const removeSagas = Promise.all(\n          Object.keys(store.sagaTasks)\n            .filter(key => !(key in sagas && sagas[key]))\n            .map(async key => {\n              await store.sagaTasks[key].cancel();\n              sagaKeysToRemove.push(key);\n            })\n        );\n\n        Object.entries(sagas).forEach(([key, saga]) => {\n          if (!(key in store.sagaTasks) && saga) {\n            store.sagaTasks[key] = sagaMiddleware.run(saga);\n          }\n        });\n        await removeSagas;\n        store.sagaTasks = objectAssign(([k]) => !sagaKeysToRemove.includes(k))({}, store.sagaTasks);\n      },\n    } as StoreReducerEnhanced\n  );\n\n  return store;\n};\n\nexport default configureStore;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAUA;AACA;AACA;AAshBA;AAAA;AACA;AADA;AAiBA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAzDA;AACA;AA8EA;AACA;AA9GA;AACA;AA+GA;;;;A","sourceRoot":""}