{"version":3,"file":"static/webpack/static/development/pages/stats.js.08e3e8e91f8eb58997f6.hot-update.js","sources":["webpack:///./pages/stats.tsx","webpack:///./src/redux/sagas/saga2.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport get from 'lodash/get';\nimport ManifestHead from '../src/components/Head/ManifestHead';\nimport Link from '../src/components/Link';\nimport dynamicStoreCallbackWrap from '../src/utils/redux/dynamicStoreCallbackWrap';\nimport { Store } from '../src/redux/store';\nimport stats, { initialState } from '../src/redux/reducers/stats';\nimport { addNumber, minusNumber } from '../src/redux/actions/actions';\nimport saga2 from '../src/redux/sagas/saga2';\n\nexport interface State {\n  stats: typeof initialState;\n}\n\nconst storeCallback = (store: Store) => {\n  store.substitueReducers({ stats });\n  store.substitueSagas({ stats: saga2 });\n};\n\nconst mapStateToProps = (state: State) => ({\n  numstats: get(state, 'stats.stats', 0),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  add8: () => dispatch(addNumber(8)),\n  minus5: () => dispatch(minusNumber(5)),\n});\n\ninterface Props extends ReturnType<typeof mapStateToProps>, ReturnType<typeof mapDispatchToProps> {}\n\nexport const Page: FC<Props> = ({ numstats, minus5, add8 }) => {\n  return (\n    <main>\n      <ManifestHead\n        title=\"Nextjs Typescript Eslint testing\"\n        themeColor=\"red\"\n        hrefPage=\"/stats\"\n        favIconPath=\"/static/icons/favicon.ico\"\n        appleIconPath=\"/static/icons/icon192x192.png\"\n        hrefManifest=\"/static/manifest/manifest.json\"\n      />\n      <span>This is stats</span>\n      <div>{`Number is ${numstats}`}</div>\n      <button type=\"button\" onClick={add8}>\n        add 8\n      </button>\n      <button type=\"button\" onClick={minus5}>\n        minus 5\n      </button>\n      <Link href=\"/\" prefetch={false}>\n        <a>index</a>\n      </Link>\n    </main>\n  );\n};\n\nconst ConnectedPage = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Page);\n\nexport default dynamicStoreCallbackWrap<Store>({ callback: storeCallback, Child: ConnectedPage });\n","import { all, call, take } from 'redux-saga/effects';\nimport actionTypes from '../actions/actionTypes';\n\nfunction* watchMinusAndLog() {\n  while (true) {\n    const action = yield take(actionTypes.MINUS);\n\n    console.log('Logged MINUS', action.payload);\n  }\n}\n\nfunction* saga1() {\n  yield all([call(watchMinusAndLog)]);\n}\n\nexport default saga1;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAKA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AC5DA;;;AAQA;AACA;AAZA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAEA;AAEA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}